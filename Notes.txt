***Floating point numbers***

Floating point numbers can be unprecise, or generate unprecise results when applied to mathematical formulae. Why is that?

I. Accuracy vs. Precision
"Accuracy refers to how close a measurement is to the true value, whereas precision has to do with how much information you have about a quantity, how uniquely you have it pinned down"

Integers can be completely accurate, but lack precision because they are unable to keep track of the fractional part (if we divide both 5 and 4 by 2, we will always get 2 as a result). 

Floating point numbers are the opposite: they have good precision but poor accuracy.

"Not every fraction can be represented exactly in binary, whereas any integer can."

---------------------------------------------------------------------------

***Floating point number representation***

"Floating point representations vary from machine to machine.
Fortunately one is by far the most common these days: the IEEE-754 standard."

An IEEE-754 float (4 bytes) or double (8 bytes) has three components:
- a sign bit telling whether the number is positive or negative
- an exponent giving its order of magnitude
- a mantissa specifying the actual digits of the number. 

The value of the number is the mantissa times 2^x, where x is the exponent.

---------------------------------------------------------------------------

*** Representação de números fixed-point: ***

Um número fixed-point usa um número inteiro para representar tanto a parte inteira quanto a parte fracionária de um número real. Isso é feito implicitamente, reservando um número fixo de bits para a parte fracionária.

---------------------------------------------------------------------------

*** C++ literals ***
Values such as numbers, characters or string characters whose values are self-evident are know as literals

Integer literals:
We can write an integer literal using decimal, octal, or hexadecimal notation
- Decimal - "normal representation"
- Octal - Integer literals that begin with 0 (zero) are interpreted as octal
- Hexadecimal - Integer literals that begin with either 0x or 0X are interpreted as hexadecimal 

Different interpretations of the same number:
	decimal:		25
	octal:			031
	hexadecimal:	0x19